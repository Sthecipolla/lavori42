



				SCRIPT DEBIANT MONITORIG
						
					
	
---------------------------------------------------------------------------------------------
NOME VARIABILE=$

assegna alla variabile il risultato dello script il $ serve ad assegnare il risultato alla
variabile utilizzata
				
---------------------------------------------------------------------------------------------
arch=$uname -a 

ti da le informazione su tutto il sistema operativo(versione, nome, ecc...) 

Linux lhima42 6.1.0-28-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.1.119-1 (2024-11-22) x86_64 GNU/Linux

1)uname = ti dice il sistema operativo (solo il nome )

2)-a = all (ti da tutti i dati possibili di quel comando)
---------------------------------------------------------------------------------------------
cpuf=$(grep "physical id" /proc/cpuinfo | wc -l)
questo cerca nel file cpuinfo i dettagli assegnati sopra

grep e un comando che cerca in un file o nell'output del terminale in base alla sintassi

es: 

grep "physical id" = nomeFile (nel file)
grep "physical id" = (nel output)

| = in aggiunta fai anche questo 

wc = sta per word count e ti conta con la flag -w(le parole) oppure con -l(le linee)
---------------------------------------------------------------------------------------------
cpuv=$(grep "processor" /proc/cpuinfo | wc -l)
stessa cosa di quello sopra solo che cerca la parola "processor"
---------------------------------------------------------------------------------------------
ram_total=$(free --mega | awk '$1 == "Mem:" {print $2}')

free = ti ritorna i valori della memoria 

--mega = mi converte il ritorno dei dati in mega

awk = e un comando che processa i dati testuali e ti cerca con il $ la parola che vuoi e puo 
fare un IF 
per esempio se scrivo $1 ti cerca la prima parola e se ci metto $1 == "Mem" controlla che siano uguale e se lo sono ti ritorna quello che ci metti dentro alle graffe {comando} 
oppure puoi solo stampare se proprio hai voglia

lista comandi trovati

print stampa un elemento 
es:

printf ti stampa :
es: %.2f ti arrotonda alle ultime due cifre del decimale 

le lettere sono uguali al printf di C letteralmente


---------------------------------------------------------------------------------------------
disk_total=$(df -m | grep "/dev/" | grep -v "/boot" | awk '{disk_t += $2} END {printf ("%.1fGb\n"), disk_t/1024}')


df = mostra la quantita di memoria disponibile del disco nel file system

-m = e uguale --mega pero '--mega' e per free '-m' invece e per df

-v ti cerca tutte le cose che non fanno parte della ricerca di grep
per esempio se cerchi grep -v dio ti trova tutte le linee che non "dio"

awk '{disk_t += $2} questo piglia i valori in seconda posizione e li somma di ogni linea

poi li stampa con il printf facendo una divisione sul risultato

{printf ("%.1fGb\n"), disk_t/1024}')

END ?? 

esempio '{disk_t += $2} END {printf ("%.1fGb\n"), disk_t/1024}'

udev                              2561     0      2561   0% /dev
tmpfs                              517     1       517   1% /run

in questa linea somma 2561 e 517 poi li divide per 1024

---------------------------------------------------------------------------------------------
cpul=$(vmstat 1 2 | tail -1 | awk '{printf $15}')

vmstat (Virtual Memory Statistics) è un comando che fornisce informazioni sul sistema, come l'utilizzo della memoria, dell'CPU e dei process

1 è l'intervallo di tempo (in secondi) tra ciascuna campionatura. In questo caso, il comando raccoglierà le statistiche ogni secondo.
2 indica il numero totale di campionamenti da raccogliere. In questo caso, il comando raccoglierà due campionamenti: il primo subito all'inizio e il secondo dopo un secondo.

tail -1 prende solo l'ultima riga dell'output di vmstat, che rappresenta lo stato del sistema al secondo campionamento.

---------------------------------------------------------------------------------------------
cpu_op=$(expr 100 - $cpul)

calcola l'utilizzo della CPU (in percentuale) basandosi sul valore che è stato precedentemente ottenuto e memorizzato nella variabile cpul

expr serve a fare calcoli aritmetici 

---------------------------------------------------------------------------------------------
who -b | awk '$1 == "system" {print $3 " " $4}'

Il comando who viene utilizzato per visualizzare gli utenti che stanno attualmente effettuando il login nel sistema
L'opzione -b (o --boot) restituisce l'ora e la data dell'ultimo avvio del sistema (boot time)


---------------------------------------------------------------------------------------------
if [ $(lsblk | grep "lvm" | wc -l) -gt 0 ]; then echo yes; else echo no; fi

fa un if e fa un echo con si o no in base al risutato e termina l'if con fi

The lsblk command is used in Linux to list information about all available block devices. It provides a tree-like structure of the storage devices connected to the system, including their partitions and mount points

-gt(greater) e verifica che wc -l e maggiore di 0


    lsblk: This command lists all block devices.
    grep "lvm": This filters the output of lsblk to find lines that contain the string "lvm". This typically represents LVM logical volumes or volume groups.
    wc -l: This counts the number of lines in the output from the grep command; effectively, it counts how many LVM-related entries were found.
    [ $(...) -gt 0 ]: This checks if the count of LVM-related entries is greater than zero. If it is, it means there are LVM volumes present.
    then echo yes; else echo no; fi: This part executes the conditional check. If the count is greater than zero, it echoes "yes"; otherwise, it echoes "no".

---------------------------------------------------------------------------------------------
tcpc=$(ss -ta | grep ESTAB | wc -l)

ss -ta: Il comando ss (Socket Statictics) è uno strumento per l'analisi delle socket di rete. L'opzione -t indica che vogliamo solo visualizzare le connessioni TCP. L'opzione -a è utilizzata per mostrare tutte le connessioni (sia quelle in ascolto che quelle stabilite).

---------------------------------------------------------------------------------------------
ulog=$(users | wc -w)

users: Questo comando elenca gli utenti attualmente connessi al sistema. Ogni nome utente è separato da uno spazio.


---------------------------------------------------------------------------------------------
ip=$(hostname -I)

hostname -I: Restituisce gli indirizzi IP della macchina, separati da spazi.
ip=: Assegna il risultato (gli indirizzi IP) alla variabile ip
